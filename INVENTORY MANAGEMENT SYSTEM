
import sqlite3
from tkinter import *
from tkinter import messagebox, ttk


# Database Setup
def setup_database():
    conn = sqlite3.connect("inventory.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY,
                        username TEXT UNIQUE NOT NULL,
                        password TEXT NOT NULL)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS products (
                        id INTEGER PRIMARY KEY,
                        name TEXT NOT NULL,
                        quantity INTEGER NOT NULL,
                        price REAL NOT NULL)''')
    # Default admin user
    cursor.execute("INSERT OR IGNORE INTO users (username, password) VALUES (?, ?)", ('admin', 'admin123'))
    conn.commit()
    conn.close()


# User Authentication
def authenticate_user(username, password):
    conn = sqlite3.connect("inventory.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE username = ? AND password = ?", (username, password))
    user = cursor.fetchone()
    conn.close()
    return user


# Inventory Management Functions
def add_product(name, quantity, price):
    conn = sqlite3.connect("inventory.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO products (name, quantity, price) VALUES (?, ?, ?)", (name, quantity, price))
    conn.commit()
    conn.close()


def edit_product(product_id, name, quantity, price):
    conn = sqlite3.connect("inventory.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE products SET name = ?, quantity = ?, price = ? WHERE id = ?", (name, quantity, price, product_id))
    conn.commit()
    conn.close()


def delete_product(product_id):
    conn = sqlite3.connect("inventory.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM products WHERE id = ?", (product_id,))
    conn.commit()
    conn.close()


def get_products():
    conn = sqlite3.connect("inventory.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM products")
    products = cursor.fetchall()
    conn.close()
    return products


def get_low_stock_products(threshold=5):
    conn = sqlite3.connect("inventory.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM products WHERE quantity <= ?", (threshold,))
    products = cursor.fetchall()
    conn.close()
    return products


# GUI
def main_screen():
    root = Tk()
    root.title("Inventory Management System")

    # Login Frame
    def login():
        username = username_entry.get()
        password = password_entry.get()
        if authenticate_user(username, password):
            root.destroy()
            inventory_screen()
        else:
            messagebox.showerror("Error", "Invalid Username or Password")

    login_frame = Frame(root, padx=20, pady=20)
    login_frame.pack()

    Label(login_frame, text="Login", font=("Arial", 18)).grid(row=0, columnspan=2, pady=10)
    Label(login_frame, text="Username").grid(row=1, column=0, pady=5)
    username_entry = Entry(login_frame)
    username_entry.grid(row=1, column=1, pady=5)

    Label(login_frame, text="Password").grid(row=2, column=0, pady=5)
    password_entry = Entry(login_frame, show="*")
    password_entry.grid(row=2, column=1, pady=5)

    Button(login_frame, text="Login", command=login).grid(row=3, columnspan=2,